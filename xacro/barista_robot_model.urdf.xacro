<?xml version="1.0"?>
<!-- <robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="barista_robot"> -->
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="$(arg robot_name)">

    <!-- Load physics parameters -->
    <xacro:include filename="$(find barista_robot_description)/xacro/physics_properties.xacro"/>

    <!-- Accept arguments from launch file -->
    <xacro:arg name="robot_name" default="barista_robot"/>
    <xacro:arg name="colour" default="Gazebo/Black"/>

    <!-- Create properties from arguments -->
    <xacro:property name="robot_name" value="$(arg robot_name)"/>
    <xacro:property name="colour" value="$(arg colour)"/>

    <xacro:arg name="include_laser" default="true"/>

    <material name="blue">
        <color rgba="0.0 0.0 1.0 1"/>
    </material>

    <material name="black">
        <color rgba="0.0 0.0 0.0 1"/>
    </material>

    <material name="cany">
        <color rgba="0.088656 0.428691 0.491021 1"/>
    </material>

    <material name="red">
        <color rgba="1.0 0.0 0.0 1"/>
    </material>

    <material name="green_light">
        <color rgba="0.0 1.0 0.0 1"/>
    </material>

    <material name="green_dark">
        <color rgba="0.0 0.5 0.0 1"/>
    </material>

    <material name="white">
        <color rgba="1.0 1.0 1.0 1"/>
    </material>


    <xacro:property name="base_width" value="0.356"/>
    <xacro:property name="base_height" value="0.155"/>

    <link name="base_link">
    </link>

    <!-- chassis -->
    <link name="chassis">
        <visual>
            <geometry>
                <cylinder length="${base_height}" radius="${base_width/2}"/>
            </geometry>
            <!-- <material name="blue"/> -->
            <material name="${robot_name}_material">
                <xacro:if value="${robot_name == 'rick'}">
                    <color rgba="1.0 0.0 0.0 1.0"/>  <!-- Red -->
                </xacro:if>
                <xacro:if value="${robot_name == 'morty'}">
                    <color rgba="0.0 0.0 1.0 1.0"/>  <!-- Blue -->
                </xacro:if>
            </material>
        </visual>
        <collision>
            <geometry>
                <cylinder length="${base_height}" radius="${base_width/2}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="0.5"/>
            <inertia ixx="0.002" ixy="0" ixz="0" 
                    iyy="0.002" iyz="0" 
                    izz="0.003"/>
        </inertial>
    </link>

    <joint name="base_link_joint" type="fixed">
        <origin xyz="0.0 0.0 0.0775" rpy="0.0 0.0 0.0"/>
        <parent link="base_link"/>
        <child link="chassis"/>
    </joint>

    <gazebo reference="chassis">
        <material>${colour}</material>
    </gazebo>

    <!-- Drive Wheel -->
    <xacro:include filename="$(find barista_robot_description)/xacro/drive_wheel.xacro"/>

    <xacro:drive_wheel prefix="left" reflect="1" robot_name="${robot_name}"/>
    <xacro:drive_wheel prefix="right" reflect="-1" robot_name="${robot_name}"/>

    <!-- Standoff Post -->
    <xacro:include filename="$(find barista_robot_description)/xacro/standoff_rod.xacro"/>

    <xacro:standoff_rod prefix="front_left" rod_radius="0.010" rod_height="0.220" x_reflect="1" y_reflect="1" robot_name="${robot_name}"/>
    <xacro:standoff_rod prefix="front_right" rod_radius="0.010" rod_height="0.220" x_reflect="1" y_reflect="-1" robot_name="${robot_name}"/>
    <xacro:standoff_rod prefix="back_left" rod_radius="0.010" rod_height="0.220" x_reflect="-1" y_reflect="1" robot_name="${robot_name}"/>
    <xacro:standoff_rod prefix="back_right" rod_radius="0.010" rod_height="0.220" x_reflect="-1" y_reflect="-1" robot_name="${robot_name}"/>

    <!-- Caster Wheels -->
    <xacro:include filename="$(find barista_robot_description)/xacro/caster_wheel.xacro"/>

    <xacro:caster_wheel prefix="front" x_pos="0.12" robot_name="${robot_name}"/>
    <xacro:caster_wheel prefix="back" x_pos="-0.12" robot_name="${robot_name}"/>

    <!-- Cup Holder Tray -->
    <xacro:include filename="$(find barista_robot_description)/xacro/cup_holder_tray.xacro"/>

    <xacro:cup_holder_tray colour="${colour}" robot_name="${robot_name}"/>

    <!-- Laser Scanner -->
    <xacro:include filename="$(find barista_robot_description)/xacro/laser_scanner.xacro"/>

    <!-- Include laser with default behavior -->
    <xacro:laser_scanner include_laser="true" robot_name="${robot_name}"/>

    <!-- libgazebo_ros_joint_state_publisher -->
    <gazebo>
        <plugin name="${robot_name}_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
        
        <ros>
            <namespace>${robot_name}</namespace>
            <remapping>~/out:=joint_states</remapping>
        </ros>

        <update_rate>${physics_config['jsp_update_rate']}</update_rate>
        <joint_name>joint_left_wheel</joint_name>
        <joint_name>joint_right_wheel</joint_name>

        <joint_name>front_yaw_joint</joint_name>
        <joint_name>front_roll_joint</joint_name>
        <joint_name>front_pitch_joint</joint_name>

        <joint_name>back_yaw_joint</joint_name>
        <joint_name>back_roll_joint</joint_name>
        <joint_name>back_pitch_joint</joint_name>

        </plugin>
    </gazebo>

    <!-- Differential drive -->
    <gazebo>
        <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller">
            
            <ros>
                <namespace>${robot_name}</namespace>
                <remapping>/cmd_vel:=cmd_vel</remapping>
            </ros>

            <update_rate>${physics_config['diff_update_rate']}</update_rate>

            <!-- wheels -->
            <left_joint>joint_left_wheel</left_joint>
            <right_joint>joint_right_wheel</right_joint>

            <!-- kinematics -->
            <wheel_separation>0.28</wheel_separation>
            <wheel_diameter>0.0704</wheel_diameter>

            <!-- limits -->
            <max_wheel_torque>${physics_config['max_wheel_torque']}</max_wheel_torque>
            <max_wheel_acceleration>${physics_config['max_wheel_acceleration']}</max_wheel_acceleration>
            <!-- <max_linear_velocity>${physics_config['max_linear_velocity']}</max_linear_velocity>
            <max_angular_velocity>${physics_config['max_angular_velocity']}</max_angular_velocity> -->

            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <!-- try to remove this later -->
            <publish_wheel_tf>false</publish_wheel_tf>

            <odometry_frame>${robot_name}/odom</odometry_frame>
            <robot_base_frame>${robot_name}/base_link</robot_base_frame>
        </plugin>
    </gazebo>

</robot>